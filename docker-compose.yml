services:
  backend:
    build: ./backend
    container_name: fastapi_backend
    volumes:
      - ./backend:/app
    restart: always
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy  # <-- CHANGED
      redis:
        condition: service_healthy  # <-- CHANGED
      kafka:
        condition: service_healthy  # <-- CHANGED
    networks:
      - mynetwork

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=FastBnB
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    restart: always
    healthcheck:  # <-- NEW: Waits for Postgres to be ready
      test: ["CMD-SHELL", "pg_isready -U postgres -d FastBnB"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: shafkatzahir001@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    ports:
      - "5050:80"
    networks:
      - mynetwork
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
      - booking_db

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    healthcheck:  # <-- NEW: Waits for Redis to be ready
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Booking Service ---
  booking_service:
    build: ./booking-service
    container_name: booking_service
    volumes:
      - ./booking-service:/app
    ports:
      - "8001:8001"
    env_file:
      - ./booking-service/.env
    depends_on:
      booking_db:
        condition: service_healthy  # <-- CHANGED
      kafka:
        condition: service_healthy  # <-- CHANGED
    networks:
      - mynetwork
    restart: always

  booking_db:
    image: postgres:13-alpine
    container_name: booking_db
    volumes:
      - booking_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=booking_db
    ports:
      - "5433:5432"
    networks:
      - mynetwork
    restart: always
    healthcheck:  # <-- NEW: Waits for Postgres to be ready
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Kafka and Zookeeper ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - mynetwork
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:  # <-- NEW: Waits for Zookeeper to be ready
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - mynetwork
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:  # <-- CHANGED
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:  # <-- NEW: Waits for Kafka itself to be ready
      test: ['CMD', 'nc', '-z', 'localhost', '9092']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  pgadmin_data:
  booking_data:

networks:
  mynetwork:
    driver: bridge
